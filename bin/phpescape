#!/usr/bin/env perl
use warnings;
use strict;
use open qw(locale);
use feature 'say';

#------------------------------------------------------------------------------
use File::Basename qw(basename);
our $PROGNAME = basename($0);

#------------------------------------------------------------------------------
our $singleQuote = 0;
our $nonAsciiPrintableOnly = 0;

#------------------------------------------------------------------------------
use Getopt::Long;
Getopt::Long::Configure('bundling', 'gnu_compat', 'no_ignore_case');
Getopt::Long::GetOptions(
    's|single-quote' => sub { $singleQuote = 1; },
    'd|double-quote' => sub { $singleQuote = 0; },
    'N|non-ascii-printable-only' => sub { $nonAsciiPrintableOnly = 1; },
    'help'           => sub { usage(); exit(0); },
) or die("Type '$PROGNAME --help' for help.\n");

sub usage { print(<<"END"); }
usage:
    $PROGNAME [<option> ...] [<filename> ...]
options:
    -s, --single-quote
    -d, --double-quote
    -N, --non-ascii-printable-only
        --help
END

###############################################################################

while (<>) {
    s{\R\z}{};
    if ($singleQuote) {
        say phpEscapeSingleQuote($_);
    } else {
        say phpEscapeDoubleQuote($_);
    }
}

sub phpEscapeSingleQuote {
    my ($string) = @_;
    if (!$nonAsciiPrintableOnly) {
        $string =~ s{\\}{\\\\}g;
        $string =~ s{\'}{\\'}g;
    }
    # `\` before anything except `\` or `'` is a literal `\`, so do
    # not escape anything else regardless of paranoia level.
    return "'" . $string . "'";
}

sub phpEscapeDoubleQuote {
    my ($string) = @_;
    if (!$nonAsciiPrintableOnly) {
        $string =~ s{\\}{\\\\}g;
        $string =~ s{\$}{\\\$}g;
        $string =~ s{\"}{\\"}g;
    }
    $string =~ s{\x09}{\\t}g;     # tab
    $string =~ s{\x0a}{\\n}g;     # line feed
    $string =~ s{\x0b}{\\v}g;     # vertical tab
    $string =~ s{\x0c}{\\f}g;     # form feed
    $string =~ s{\x0d}{\\r}g;     # carriage return
    $string =~ s{\x1b}{\\e}g;     # escape
    $string =~ s{[\x00-\x1f\x7f-\xff]}
                {"\\x" . sprintf('%02x', ord($&))}ge;
    $string =~ s{[\x{0100}-\x{10ffff}]}
                {"\\u{" . sprintf('%04x', ord($&)) . "}"}ge;
    return '"' . $string . '"';
}
