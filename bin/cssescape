#!/usr/bin/env perl
use warnings;
use strict;
use feature 'say';

#------------------------------------------------------------------------------
use File::Basename qw(basename);
our $PROGNAME = basename($0);

#------------------------------------------------------------------------------
use open IO => qw(:locale);
use Encode::Locale;
use Encode qw(decode);
BEGIN {
    @ARGV = map { decode('locale', $_, Encode::FB_CROAK) } @ARGV;
}

#------------------------------------------------------------------------------
our $quoteStyle = 'single-quote';
our $escapeStyle = 'string';
our $nonAsciiPrintableOnly = 0;

#------------------------------------------------------------------------------
use Getopt::Long;
Getopt::Long::Configure('bundling', 'gnu_compat', 'no_ignore_case');
Getopt::Long::GetOptions(
    's|single-quote' => sub { $quoteStyle = 'single-quote'; },
    'd|double-quote' => sub { $quoteStyle = 'double-quote'; },
    'i|identifier'   => sub { $escapeStyle = 'identifier'; },
    'string'         => sub { $escapeStyle = 'string'; },
    'N|non-ascii-printable-only' => sub { $nonAsciiPrintableOnly = 1; },
    'help'           => sub { usage(); exit(0); },
) or die("Type '$PROGNAME --help' for help.\n");

sub usage { print(<<"END"); }
usage:
    $PROGNAME [<option> ...] [<filename> ...]
options:
    -s, --single-quote
    -d, --double-quote
    -i, --identifier
        --string
    -N, --non-ascii-printable-only
        --help
END

###############################################################################

while (<>) {
    s{\R\z}{};
    say cssEscape($_);
}

sub cssEscape {
    my ($string) = @_;
    if ($escapeStyle eq 'identifier') {
        return cssEscapeIdentifier($string);
    } elsif ($escapeStyle eq 'string') {
        return cssEscapeSingleQuote($string) if $quoteStyle eq 'single-quote';
        return cssEscapeDoubleQuote($string) if $quoteStyle eq 'double-quote';
        return;
    } else {
        return;
    }
}

sub cssEscapeSingleQuote {
    my ($string) = @_;
    if ($nonAsciiPrintableOnly) {
        $string =~ s{\\}{\\\\}g;
        $string =~ s{'}{\\'}g;
    }
    $string =~ s{([\t\n\v\f\r])(?=([A-Fa-f0-9 ]?))}
                {"\\" . sprintf('%02x', ord($1)) . ($2 eq '' ? '' : ' ')}ge;
    return "'" . $string . "'";
}

sub cssEscapeDoubleQuote {
    my ($string) = @_;
    if ($nonAsciiPrintableOnly) {
        $string =~ s{\\}{\\\\}g;
        $string =~ s{"}{\\"}g;
    }
    $string =~ s{([\t\n\v\f\r])(?=([A-Fa-f0-9 ]?))}
                {"\\" . sprintf('%02x', ord($1)) . ($2 eq '' ? '' : ' ')}ge;
    return '"' . $string . '"';
}

sub cssEscapeIdentifier {
    my ($string) = @_;
    if ($nonAsciiPrintableOnly) {
        $string =~ s{\\}{\\\\}g; # always escape \ first.

        # string starting with digit followed by hexdigit or space
        $string =~ s{^([[:digit:]])(?=([A-Fa-f0-9 ]?))}
                    {"\\" . sprintf('%02x', ord($1)) . ($2 eq '' ? '' : ' ')}ge;

        # string containing space (" ") and any punctuation except "_" "\\"
        $string =~ s{([\- !"#$%&'()*+,./:;<=>?@[]^`\{|\}~])}{\\$1}g;
    }
    $string =~ s{([\t\n\v\f\r])(?=([A-Fa-f0-9 ]?))}
                {"\\" . sprintf('%02x', ord($1)) . ($2 eq '' ? '' : ' ')}ge;
    $string =~ s{([\x00-\x1f\x7f-\xff])(?=([A-Fa-f0-9 ]?))}
                {"\\" . sprintf('%02x', ord($1)) . ($2 eq '' ? '' : ' ')}ge;
    $string =~ s{([\x{0100}-\x{ffff}])(?=([A-Fa-f0-9 ]?))}
                {"\\" . sprintf('%02x', ord($1)) . ($2 eq '' ? '' : ' ')}ge;
    $string =~ s{([\x{010000}-\x{10ffff}])(?=([A-Fa-f0-9 ]?))}
                {"\\" . sprintf('%02x', ord($1)) . ($2 eq '' ? '' : ' ')}ge;
    # return '"' . $string . '"' if $quoteStyle eq 'double-quote';
    # return "'" . $string . "'" if $quoteStyle eq 'single-quote';
    return $string;
}

# hat-tip:
#     https://mathiasbynens.be/notes/css-escapes
