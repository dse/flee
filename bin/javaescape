#!/usr/bin/env perl
use warnings;
use strict;
use open qw(locale);
use feature 'say';

#------------------------------------------------------------------------------
use File::Basename qw(basename);
our $PROGNAME = basename($0);

#------------------------------------------------------------------------------
our $singleQuote = 0;
our $nonAsciiPrintableOnly = 0;

#------------------------------------------------------------------------------
use Getopt::Long;
Getopt::Long::Configure('bundling', 'gnu_compat', 'no_ignore_case');
Getopt::Long::GetOptions(
    's|single-quote' => sub { $singleQuote = 1; },
    'd|double-quote' => sub { $singleQuote = 0; },
    'N|non-ascii-printable-only' => sub { $nonAsciiPrintableOnly = 1; },
    'help'           => sub { usage(); exit(0); },
) or die("Type '$PROGNAME --help' for help.\n");

sub usage { print(<<"END"); }
usage:
    $PROGNAME [<option> ...] [<filename> ...]
options:
    -s, --single-quote
    -d, --double-quote
    -N, --non-ascii-printable-only
        --help
END

###############################################################################

while (<>) {
    s{\R\z}{};
    say javaEscape($_);
}

sub javaEscape {
    my ($string, %options) = @_;
    if (!$nonAsciiPrintableOnly) {
        $string =~ s{\\}{\\\\}g;
        $string =~ s{\"}{\\"}g;
    }
    $string =~ s{\x08}{\\b}g;   # backspace
    $string =~ s{\x09}{\\t}g;   # tab
    $string =~ s{\x0a}{\\n}g;   # line feed
    $string =~ s{\x0c}{\\f}g;   # form feed
    $string =~ s{\x0d}{\\r}g;   # carriage return
    $string =~ s{[\x00-\x1f\x7f-\x{ffff}]}{"\\u" . sprintf('%04x', ord($&))}ge;
    $string =~ s{[\x{10000}-\x{10ffff}]}{jsonEscapeSurrogatePair($&)}ge;
    return '"' . $string . '"';
}

sub jsonEscapeSurrogatePair {
    my ($char) = @_;
    my $codepoint = ord($char);
    return if $codepoint < 0x10000;
    return if $codepoint > 0x10ffff;
    my $highSurrogate = 0xd800 + int(($codepoint - 0x10000) / 1024);
    my $lowSurrogate  = 0xdc00 + ($codepoint - 0x10000) % 1024;
    return sprintf('\\u%04x\\u%04x', $highSurrogate, $lowSurrogate);
}
