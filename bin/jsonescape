#!/usr/bin/env perl
use warnings;
use strict;
use feature 'say';

#------------------------------------------------------------------------------
use File::Basename qw(basename);
our $PROGNAME = basename($0);

#------------------------------------------------------------------------------
use open IO => qw(:locale);
use Encode::Locale;
use Encode qw(decode);
BEGIN {
    @ARGV = map { decode('locale', $_, Encode::FB_CROAK) } @ARGV;
}

###############################################################################

while (<>) {
    s{\R\z}{};
    say jsonEscape($_);
}

sub jsonEscape {
    my ($string) = @_;
    $string =~ s{\\}{\\\\}g;
    $string =~ s{\"}{\\"}g;
    $string =~ s{/}{\\/}g;
    $string =~ s{[\x00-\x1f\x7f-\x{ffff}]}{"\\u" . sprintf('%04x', ord($&))}ge;
    $string =~ s{[\x{10000}-\x{10ffff}]}{jsonEscapeSurrogatePair($&)}ge;
    return '"' . $string . '"';
}

sub jsonEscapeSurrogatePair {
    my ($char) = @_;
    my $codepoint = ord($char);
    return if $codepoint < 0x10000;
    return if $codepoint > 0x10ffff;
    my $highSurrogate = 0xd800 + int(($codepoint - 0x10000) / 1024);
    my $lowSurrogate  = 0xdc00 + ($codepoint - 0x10000) % 1024;
    return sprintf('\\u%04x\\u%04x', $highSurrogate, $lowSurrogate);
}
