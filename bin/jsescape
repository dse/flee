#!/usr/bin/env perl
use warnings;
use strict;
use feature 'say';

#------------------------------------------------------------------------------
use File::Basename qw(basename);
our $PROGNAME = basename($0);

#------------------------------------------------------------------------------
use open IO => qw(:locale);
use Encode::Locale;
use Encode qw(decode);
BEGIN {
    @ARGV = map { decode('locale', $_, Encode::FB_CROAK) } @ARGV;
}

#------------------------------------------------------------------------------
our $singleQuote = 0;
our $nonAsciiPrintableOnly = 0;

#------------------------------------------------------------------------------
use Getopt::Long;
Getopt::Long::Configure('bundling', 'gnu_compat', 'no_ignore_case');
Getopt::Long::GetOptions(
    's|single-quote'   => sub { $singleQuote = 1; },
    'd|double-quote'   => sub { $singleQuote = 0; },
    'N|non-ascii-printable-only' => sub { $nonAsciiPrintableOnly = 1; },
    'help'             => sub { usage(); exit(0); },
) or die("Type '$PROGNAME --help' for help.\n");

sub usage { print(<<"END"); }
usage:
    $PROGNAME [<option> ...] [<filename> ...]
options:
    -s, --single-quote
    -d, --double-quote
    'N|non-ascii-printable-only' => sub { $nonAsciiPrintableOnly = 1; },
        --help
END

###############################################################################

while (<>) {
    s{\R\z}{};
    if ($singleQuote) {
        say jsEscapeSingleQuote($_);
    } else {
        say jsEscapeDoubleQuote($_);
    }
}

sub jsEscapeSingleQuote {
    my ($string) = @_;
    if ($nonAsciiPrintableOnly) {
        $string =~ s{[\x00-\x1f\x7f-\x{ffff}]}{"\\u" . sprintf('%04x', ord($&))}ge;
        $string =~ s{[\x{10000}-\x{10ffff}]}{escapeSurrogatePair($&)}ge;
    } else {
        $string =~ s{\\}{\\\\}g;
        $string =~ s{\'}{\\'}g;
        $string =~ s{[\x00-\x1f\x7f-\x{ffff}]}{"\\u" . sprintf('%04x', ord($&))}ge;
        $string =~ s{[\x{10000}-\x{10ffff}]}{escapeSurrogatePair($&)}ge;
    }
    return "'" . $string . "'";
}

sub jsEscapeDoubleQuote {
    my ($string) = @_;
    if ($nonAsciiPrintableOnly) {
        $string =~ s{[\x00-\x1f\x7f-\x{ffff}]}{"\\u" . sprintf('%04x', ord($&))}ge;
        $string =~ s{[\x{10000}-\x{10ffff}]}{escapeSurrogatePair($&)}ge;
    } else {
        $string =~ s{\\}{\\\\}g;
        $string =~ s{\"}{\\"}g;
        $string =~ s{[\x00-\x1f\x7f-\x{ffff}]}{"\\u" . sprintf('%04x', ord($&))}ge;
        $string =~ s{[\x{10000}-\x{10ffff}]}{escapeSurrogatePair($&)}ge;
    }
    return '"' . $string . '"';
}

sub escapeSurrogatePair {
    my ($char) = @_;
    my $codepoint = ord($char);
    return if $codepoint < 0x10000;
    return if $codepoint > 0x10ffff;
    my $highSurrogate = 0xd800 + int(($codepoint - 0x10000) / 1024);
    my $lowSurrogate  = 0xdc00 + ($codepoint - 0x10000) % 1024;
    return sprintf('\\u%04x\\u%04x', $highSurrogate, $lowSurrogate);
}
